// function getTodos(query = '', filter = '') {
//     let url = 'http://127.0.0.1:8001/api/get-todos';
    
//     if (query) {
//         url = `http://127.0.0.1:8001/api/search/?search=${query}`;
//     }

//     if (filter) {
//         url = `http://127.0.0.1:8001/api/search/?filter=${filter}`;
//     }

    

    
//     let wrapper = $('#sub-container');
//     $.ajax({
//         url: url,
//         method: 'GET',
        
//         success: function(data) {
//             console.log(data);
//             // Clear the wrapper before appending todos
//             wrapper.empty();
//             for (let d of data) {
//                 let listContainer = `
//                     <div class="task">
//                         <div class="child">
//                             <input type="checkbox" name="check" class="completed" id="completed_${d.id}" data-todo-id="${d.id}" ${d.completed ? 'checked' : ''}>
//                             <span>${d.title}</span>
//                             <div class="task-reactions">
//                                 <button class="reaction-btn" data-task-id="{{ task.id }}" data-reaction="üëç">üëç</button>
//                                 <button class="reaction-btn" data-task-id="{{ task.id }}" data-reaction="‚ù§Ô∏è">‚ù§Ô∏è</button>
//                                 <button class="reaction-btn" data-task-id="{{ task.id }}" data-reaction="üòÇ">üòÇ</button>
//                                 <button class="reaction-btn" data-task-id="{{ task.id }}" data-reaction="üò¢">üò¢</button>
//                                 <button class="reaction-btn" data-task-id="{{ task.id }}" data-reaction="üò†">üò†</button>
//                             </div>
//                         </div>
//                         <div class="icons">
//                             <div class="icon editbtn" data-id="${d.id}" id="editbtn">
//                                 <i class="fas fa-pencil-square"></i>
//                             </div>
//                             <div class="icon delbtn" id="delbtn" data-id="${d.id}">
//                                 <i class="fa fa-trash" aria-hidden="true"></i>
//                             </div>
//                         </div>
//                     </div>
//                 `;
//                 wrapper.append(listContainer);
//             }

//             // Bind edit and delete button events
//             bindEditAndDeleteEvents();

//             // Bind change event for dynamic checkboxes
//             bindCheckboxChangeEvent();
//         },
//         error: function(xhr, status, error) {
//             console.log('Error fetching todos', status, error);
//         }
//     });
// }

$('#search-form').on('submit', function(e) {
    e.preventDefault();
    let searchText = $('#search').val();
    const data = { title: searchText };
    let url = 'http://127.0.0.1:8001/api/create-todo/';
    if (indicator == 1) {
        url = `http://127.0.0.1:8001/api/update-todo/${item_id}/`;
    }
    $.ajax({
        url: url,
        method: 'POST',
        contentType: 'application/json',
        headers: { 'X-CSRFToken': csrftoken },
        data: JSON.stringify(data),
        success: function(response) {
            console.log('Success', response);
            getTodos();
            $('#search').val('');
        },
        error: function(xhr, status, error) {
            console.log('Error', status, error);
        }
    });
});




$(document).ready(function() {
    // Function to get CSRF token value from the input field
    function getCSRFToken() {
        return $('#csrf-token').val();
    }

    // Fetch todos on page load if user is authenticated
    if (localStorage.getItem('accessToken')) {
        getTodos();  // Fetch todos only if access token is present
    }

    // Fetch todos on search input change
    $('#search-todo').on('input', function() {
        getTodos($(this).val().trim());
    });

    // Handle form submission for search
    $('#search-todo-form').on('submit', function(e) {
        e.preventDefault();
        let query = $('#search-todo').val().trim();
        getTodos(query);
    });

    // Handle filter change
    $('#select').on('change', function() {
        getTodos($('#search-todo').val().trim(), $(this).val());
    });

    // Clear search input
    $('#clear').on('click', function() {
        $('#search-todo').val('');
        $(this).hide();
        getTodos();
    });

     // Function to get CSRF token value from the input field
    function getCSRFToken() {
        return $('#csrf-token').val();
    }

    $('#registration-form').on('submit', function(e) {
        e.preventDefault(); // Prevent default form submission
        let formData = $(this).serialize(); // Serialize form data
        let url = "http://127.0.0.1:8001/api/register/";
    
        // Retrieve CSRF token
        let csrftoken = getCSRFToken();
        console.log('CSRF Token:', csrftoken); // Log CSRF token to console for debugging
    
        // Send AJAX request to register API endpoint
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRFToken': csrftoken, // Include CSRF token in headers
                'Cookie': getCookie('csrftoken'), // Include session cookie
            },
            data: formData,
            success: function(response) {
                // Handle successful registration response
                alert('Registered successfully');
                // Optionally, redirect to another page or perform additional actions
                window.location.href = "login.html"; // Redirect to login page after registration
            },
            error: function(xhr, status, error) {
                // Handle registration error
                alert('Registration failed: ' + error);
                console.error('Registration Error:', xhr.responseText); // Log detailed error message
            }
        });
    });
    
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie!== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    

    
    

    // Handle login form submission
    $('#login-form').on('submit', function(e) {
        e.preventDefault(); // Prevent default form submission
        var formData = $(this).serialize(); // Serialize form data
        let url = "http://127.0.0.1:8001/api/login/";
        // Send AJAX request to your login API endpoint
        $.ajax({
            url: url,
            method: 'POST',
            data: formData,
            success: function(response) {
                // Store tokens in local storage
                localStorage.setItem('accessToken', response.access);
                localStorage.setItem('refreshToken', response.refresh);
                // Redirect to another page
                window.location.href = "todo.html"; // Change to your target URL
                // Toggle login/logout links
                toggleLoginLogoutLinks(true);
                // Fetch todos after successful login
                getTodos();
            },
            error: function(xhr, status, error) {
                // Handle login error
                alert('Login failed: ' + error);
            }
        });
    });


    // Handle logout action
    $('#logout-btn').on('click', function() {
        let url = "http://127.0.0.1:8001/api/logout/";
        let refreshToken = localStorage.getItem('refreshToken');
    
        if (!refreshToken) {
            console.error('No refresh token found in localStorage');
            return;
        }
    
        // Data to be sent in the request body
        let requestData = { refresh: refreshToken };
    
        // Make authenticated request using makeAuthenticatedRequest function
        makeAuthenticatedRequest(url, 'POST', JSON.stringify(requestData), function(response) {
            // Clear tokens from local storage
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refreshToken');
            // Handle successful logout
            console.log('Logged out successfully');
            // Redirect to login page or perform any other action
            window.location.href = "registration.html"; // Change to your target URL
        }, function(xhr, status, error) {
            // Handle logout error
            console.error('Error logging out:', error);
            // Always clear tokens from local storage after attempting logout
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refreshToken');
            // Redirect to login page even on error (optional)
            window.location.href = "registration.html"; // Change to your target URL
        });
    });

    // Clear button for search input
    const $searchInput = $('#search-todo');
    const $clearButton = $('#clear');
    $searchInput.on('input', function() {
        if ($searchInput.val().trim() !== '') {
            $clearButton.show();
        } else {
            $clearButton.hide();
        }
    });
    $clearButton.on('click', function() {
        $searchInput.val('');
        $clearButton.hide();
        getTodos();
    });

    // Function to make authenticated AJAX requests
    function makeAuthenticatedRequest(url, method, data, successCallback, errorCallback) {
        let accessToken = localStorage.getItem('accessToken');
        $.ajax({
            url: url,
            method: method,
            headers: {
                'Authorization': 'Bearer ' + accessToken,
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            },
            data: data,
            success: successCallback,
            error: function(xhr, status, error) {
                if (xhr.status === 401) {
                    refreshToken(function() {
                        makeAuthenticatedRequest(url, method, data, successCallback, errorCallback);
                    });
                } else {
                    errorCallback(xhr, status, error);
                }
            }
        });
    }

    // Example of creating a new reaction
    function createReaction(taskId, reactionType) {
        let url = `http://127.0.0.1:8001/api/reactions/create/`;

        // Data to be sent in the request body
        let data = {
            task: taskId,
            reaction_type: reactionType
        };

        // Send AJAX request to create a new reaction
        makeAuthenticatedRequest(url, 'POST', JSON.stringify(data), function(response) {
            console.log('Reaction created successfully:', response);
            // Optionally update UI or perform other actions after successful creation
            appendReactionToTask(taskId, reactionType);
        }, function(xhr, status, error) {
            console.error('Error creating reaction:', error);
            // Handle error as needed
        });
    }

    // Example of deleting a reaction by ID
    function deleteReaction(reactionId) {
        let url = `http://127.0.0.1:8001/api/reactions/${reactionId}/`;

        // Send AJAX request to delete a reaction
        makeAuthenticatedRequest(url, 'DELETE', {}, function(response) {
            console.log('Reaction deleted successfully:', response);
            // Optionally update UI or perform other actions after successful deletion
            removeReactionFromTask(reactionId);
        }, function(xhr, status, error) {
            console.error('Error deleting reaction:', error);
            // Handle error as needed
        });
    }

    // Fetch todos function with optional query and filter parameters
    function getTodos(query = '', filter = '') {
        let url = 'http://127.0.0.1:8001/api/get-todos/';

        if (query) {
            url += `?search=${query}`;
        }

        if (filter) {
            url += `&filter=${filter}`;
        }

        let wrapper = $('#sub-container');

        // Make authenticated request using makeAuthenticatedRequest function
        makeAuthenticatedRequest(url, 'GET', {}, function(response) {
            console.log('Todos:', response);

            // Clear the wrapper before appending todos
            wrapper.empty();

            for (let todo of response) {
                let listContainer = `
                    <div class="task" data-task-id="${todo.id}">
                        <div class="child">
                            <input type="checkbox" name="check" class="completed" id="completed_${todo.id}" data-todo-id="${todo.id}" ${todo.completed ? 'checked' : ''}>
                            <span>${todo.title}</span>
                            <div class="task-reactions hover d-flex">
                                <button class="reaction-btn ms-2" data-task-id="${todo.id}"><i class="fas fa-pencil-square"></i></button>
                                <div class="reactions" id="reactions_${todo.id}">
                                    <!-- Reactions will be appended here -->
                                </div>
                            </div>
                        </div>
                        <div class="icons">
                            <div class="icon editbtn" data-id="${todo.id}">
                                <i class="fas fa-pencil-square"></i>
                            </div>
                            <div class="icon delbtn" data-id="${todo.id}">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                `;
                wrapper.append(listContainer);

                // Fetch and append reactions for this todo item
                fetchReactions(todo.id);
            }

            // Bind edit and delete button events
            bindEditAndDeleteEvents();
            
            // Bind reaction button events
            bindReactionEvents();

            // Bind change event for dynamic checkboxes
            bindCheckboxChangeEvent();
        }, function(xhr, status, error) {
            console.error('Error fetching todos:', error);
        });
    }

    // Function to bind edit and delete button events
    function bindEditAndDeleteEvents() {
        $('.editbtn').each(function() {
            $(this).on('click', function() {
                let itemId = $(this).data('id');
                let btnGrandParents = $(this).parents('.task');
                let grandParentsFc = btnGrandParents.find('.child span').text();
                $('#search-todo').val(grandParentsFc);
                if ($('#search-todo').val() == grandParentsFc) {
                    indicator = 1;
                    item_id = itemId;
                }
            });
        });

        $('.delbtn').each(function() {
            $(this).on('click', function() {
                del_id = $(this).data('id');
                let url = `http://127.0.0.1:8001/api/delete-todo/${del_id}/`;
                makeAuthenticatedRequest(url, 'DELETE', {}, function(data) {
                    console.log("Todo item deleted successfully");
                    getTodos();  // Refresh the list after successful deletion
                }, function(xhr, status, error) {
                    console.error('Error deleting todo item:', error);
                });
            });
        });
    }

    // Function to bind reaction button events
    function bindReactionEvents() {
        $('.reaction-btn').each(function() {
            $(this).on('click', function() {
                let taskId = $(this).data('task-id');
                let reactionType = $(this).data('reaction');
                createReaction(taskId, reactionType);
            });
        });
    }


function makeAuthenticatedRequest(url, method, data, successCallback, errorCallback) {
    let accessToken = localStorage.getItem('accessToken');
    $.ajax({
        url: url,
        method: method,
        headers: {
            'Authorization': 'Bearer ' + accessToken,
            'Content-Type': 'application/json',
            'X-CSRFToken': csrftoken
        },
        data: data,
        success: successCallback,
        error: function(xhr, status, error) {
            if (xhr.status === 401) {
                refreshToken(function() {
                    makeAuthenticatedRequest(url, method, data, successCallback, errorCallback);
                });
            } else {
                errorCallback(xhr, status, error);
            }
        }
    });
}


function refreshToken(callback) {
    let refreshToken = localStorage.getItem('refreshToken');
    $.ajax({
        url: 'http://127.0.0.1:8001/api/token/refresh/',
        method: 'POST',
        data: { refresh: refreshToken },
        success: function(response) {
            localStorage.setItem('accessToken', response.access);
            if (callback) callback();
        },
        error: function(xhr, status, error) {
            console.error('Error refreshing token:', error);
            alert('Session expired. Please log in again.');
            window.location.href = "registration.html"; // Redirect to login page
        }
    });
}